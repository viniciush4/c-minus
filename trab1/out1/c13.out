5: int -> INT
5: minloc -> ID
5: ( -> LPAREN
5: int -> INT
5: a -> ID
5: [ -> LBRACK
5: ] -> RBRACK
5: , -> COMMA
5: int -> INT
5: low -> ID
5: , -> COMMA
5: int -> INT
5: high -> ID
5: ) -> RPAREN
5: { -> LBRACE
6: int -> INT
6: i -> ID
6: ; -> SEMI
7: int -> INT
7: x -> ID
7: ; -> SEMI
8: int -> INT
8: k -> ID
8: ; -> SEMI
10: k -> ID
10: = -> ASSIGN
10: low -> ID
10: ; -> SEMI
11: x -> ID
11: = -> ASSIGN
11: a -> ID
11: [ -> LBRACK
11: low -> ID
11: ] -> RBRACK
11: ; -> SEMI
12: i -> ID
12: = -> ASSIGN
12: low -> ID
12: + -> PLUS
12: 1 -> NUM
12: ; -> SEMI
13: while -> WHILE
13: ( -> LPAREN
13: i -> ID
13: < -> LT
13: high -> ID
13: ) -> RPAREN
13: { -> LBRACE
14: if -> IF
14: ( -> LPAREN
14: a -> ID
14: [ -> LBRACK
14: i -> ID
14: ] -> RBRACK
14: < -> LT
14: x -> ID
14: ) -> RPAREN
14: { -> LBRACE
15: x -> ID
15: = -> ASSIGN
15: a -> ID
15: [ -> LBRACK
15: i -> ID
15: ] -> RBRACK
15: ; -> SEMI
16: k -> ID
16: = -> ASSIGN
16: i -> ID
16: ; -> SEMI
17: } -> RBRACE
18: i -> ID
18: = -> ASSIGN
18: i -> ID
18: + -> PLUS
18: 1 -> NUM
18: ; -> SEMI
19: } -> RBRACE
20: return -> RETURN
20: k -> ID
20: ; -> SEMI
21: } -> RBRACE
23: void -> VOID
23: sort -> ID
23: ( -> LPAREN
23: int -> INT
23: a -> ID
23: [ -> LBRACK
23: ] -> RBRACK
23: , -> COMMA
23: int -> INT
23: low -> ID
23: , -> COMMA
23: int -> INT
23: high -> ID
23: ) -> RPAREN
23: { -> LBRACE
24: int -> INT
24: i -> ID
24: ; -> SEMI
25: int -> INT
25: k -> ID
25: ; -> SEMI
26: int -> INT
26: t -> ID
26: ; -> SEMI
28: i -> ID
28: = -> ASSIGN
28: low -> ID
28: ; -> SEMI
29: while -> WHILE
29: ( -> LPAREN
29: i -> ID
29: < -> LT
29: high -> ID
29: - -> MINUS
29: 1 -> NUM
29: ) -> RPAREN
29: { -> LBRACE
30: k -> ID
30: = -> ASSIGN
30: minloc -> ID
30: ( -> LPAREN
30: a -> ID
30: , -> COMMA
30: i -> ID
30: , -> COMMA
30: high -> ID
30: ) -> RPAREN
30: ; -> SEMI
31: t -> ID
31: = -> ASSIGN
31: a -> ID
31: [ -> LBRACK
31: k -> ID
31: ] -> RBRACK
31: ; -> SEMI
32: a -> ID
32: [ -> LBRACK
32: k -> ID
32: ] -> RBRACK
32: = -> ASSIGN
32: a -> ID
32: [ -> LBRACK
32: i -> ID
32: ] -> RBRACK
32: ; -> SEMI
33: a -> ID
33: [ -> LBRACK
33: i -> ID
33: ] -> RBRACK
33: = -> ASSIGN
33: t -> ID
33: ; -> SEMI
34: i -> ID
34: = -> ASSIGN
34: i -> ID
34: + -> PLUS
34: 1 -> NUM
34: ; -> SEMI
35: } -> RBRACE
36: } -> RBRACE
38: void -> VOID
38: main -> ID
38: ( -> LPAREN
38: void -> VOID
38: ) -> RPAREN
38: { -> LBRACE
39: int -> INT
39: x -> ID
39: [ -> LBRACK
39: 10 -> NUM
39: ] -> RBRACK
39: ; -> SEMI
40: int -> INT
40: i -> ID
40: ; -> SEMI
42: i -> ID
42: = -> ASSIGN
42: 0 -> NUM
42: ; -> SEMI
43: while -> WHILE
43: ( -> LPAREN
43: i -> ID
43: < -> LT
43: 10 -> NUM
43: ) -> RPAREN
43: { -> LBRACE
44: x -> ID
44: [ -> LBRACK
44: i -> ID
44: ] -> RBRACK
44: = -> ASSIGN
44: input -> INPUT
44: ( -> LPAREN
44: ) -> RPAREN
44: ; -> SEMI
45: i -> ID
45: = -> ASSIGN
45: i -> ID
45: + -> PLUS
45: 1 -> NUM
45: ; -> SEMI
46: } -> RBRACE
48: sort -> ID
48: ( -> LPAREN
48: x -> ID
48: , -> COMMA
48: 0 -> NUM
48: , -> COMMA
48: 10 -> NUM
48: ) -> RPAREN
48: ; -> SEMI
49: i -> ID
49: = -> ASSIGN
49: 0 -> NUM
49: ; -> SEMI
50: write -> WRITE
50: ( -> LPAREN
50: "Sorted array: " -> STRING
50: ) -> RPAREN
50: ; -> SEMI
51: while -> WHILE
51: ( -> LPAREN
51: i -> ID
51: < -> LT
51: 10 -> NUM
51: ) -> RPAREN
51: { -> LBRACE
52: output -> OUTPUT
52: ( -> LPAREN
52: x -> ID
52: [ -> LBRACK
52: i -> ID
52: ] -> RBRACK
52: ) -> RPAREN
52: ; -> SEMI
53: write -> WRITE
53: ( -> LPAREN
53: " " -> STRING
53: ) -> RPAREN
53: ; -> SEMI
54: i -> ID
54: = -> ASSIGN
54: i -> ID
54: + -> PLUS
54: 1 -> NUM
54: ; -> SEMI
55: } -> RBRACE
56: write -> WRITE
56: ( -> LPAREN
56: "\n" -> STRING
56: ) -> RPAREN
56: ; -> SEMI
57: } -> RBRACE
